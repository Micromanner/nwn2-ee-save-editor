name: Test Build

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read

jobs:
  test-build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'ubuntu-latest'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ''

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: install frontend dependencies
        run: npm install
        working-directory: ./frontend

      - name: setup python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: cache python dependencies
        uses: actions/cache@v4
        with:
          path: |
            backend/venv
          key: python-venv-${{ runner.os }}-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            python-venv-${{ runner.os }}-

      - name: cache nuitka build artifacts
        uses: actions/cache@v4
        with:
          path: |
            frontend/src-tauri/binaries/.nuitka-cache
            ~/.nuitka
            frontend/src-tauri/binaries/*.build
            frontend/src-tauri/binaries/*.dist
          key: nuitka-${{ runner.os }}-${{ hashFiles('backend/build_fastapi_sidecar.py', 'backend/fastapi_server.py', 'backend/requirements.txt') }}
          restore-keys: |
            nuitka-${{ runner.os }}-
      
      - name: install python dependencies and build rust extensions
        shell: bash
        working-directory: ./backend
        run: |
          # Create venv only if it doesn't exist (cache miss)
          if [ ! -d "venv" ]; then
            python -m venv venv
          fi
          
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            source venv/Scripts/activate
          else
            source venv/bin/activate
          fi
          
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
          maturin develop --release --manifest-path rust_extensions/Cargo.toml
          maturin develop --release --features python-bindings --manifest-path parsers/rust_tda_parser/Cargo.toml
          maturin develop --release --features python-bindings --manifest-path parsers/rust_tlk_parser/Cargo.toml
          maturin develop --release --manifest-path parsers/rust_erf_parser/Cargo.toml
          maturin develop --release --manifest-path parsers/rust_icon_cache/Cargo.toml

      - name: build fastapi sidecar
        shell: bash
        working-directory: ./backend
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            source venv/Scripts/activate
          else
            source venv/bin/activate
          fi
          python build_fastapi_sidecar.py


      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          projectPath: "./frontend"
          args: ${{ matrix.args }}
          # Don't upload artifacts, just test the build
          includeUpdaterJson: false