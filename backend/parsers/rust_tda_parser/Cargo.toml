[package]
name = "rust_tda_parser"
version = "0.1.0"
edition = "2021"
authors = ["NWN2 Enhanced Edition Editor Team"]
description = "High-performance Rust parser for NWN2 2DA table files"
license = "MIT"

[lib]
name = "rust_tda_parser"
crate-type = ["cdylib", "rlib"]

[dependencies]
# PyO3 for Python bindings
pyo3 = { version = "0.20", features = ["extension-module", "multiple-pymethods"], optional = true }

# Serialization for msgpack cache support
serde = { version = "1.0", features = ["derive"] }
rmp-serde = "1.1.2"

# Compression for cache files
flate2 = "1.0"

# Parallel processing
rayon = "1.8"

# Memory mapping for large files
memmap2 = "0.9"

# Fast hashing
ahash = { version = "0.8", features = ["serde"] }

# String interning for memory efficiency
string-interner = "0.17"

# Error handling
thiserror = "1.0"

# SIMD optimizations (when available)
wide = { version = "0.7", optional = true }

# Fast integer parsing
lexical = "7.0"

# Zero-copy string processing
bstr = "1.8"

# Fast collections
indexmap = "2.1"
smallvec = { version = "1.11", features = ["serde"] }

[dev-dependencies]
# Testing framework
criterion = { version = "0.5", features = ["html_reports"] }
proptest = "1.4"

# Test utilities
tempfile = "3.8"
pretty_assertions = "1.4"

[features]
default = ["simd"]
simd = ["wide"]
python-bindings = ["dep:pyo3"]

[profile.release]
# Maximum optimization for production builds
opt-level = 3
lto = true
codegen-units = 1
panic = "unwind"
strip = true

[profile.bench]
# Optimize for benchmarks
opt-level = 3
lto = true
codegen-units = 1
debug = true

[[bench]]
name = "parser_benchmark"
harness = false

[[bench]]
name = "tokenizer_benchmark"
harness = false

[target.'cfg(target_os = "linux")'.dependencies]
# Linux-specific optimizations
jemallocator = { version = "0.5", optional = true }

[target.'cfg(windows)'.dependencies]
# Windows-specific dependencies if needed
winapi = { version = "0.3", features = ["winbase", "fileapi"], optional = true }