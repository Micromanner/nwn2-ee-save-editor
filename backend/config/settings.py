"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.0.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-vc#%ou*#-^1a_a*da-)@isix5mmsov!5z8cv%8*p*tu4$*zd8k')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True') == 'True'

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'drf_spectacular',
    'character',
    'items',
    'gamedata',
    'api',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.gzip.GZipMiddleware',  # Add GZIP compression
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'api.middleware.DesktopUserMiddleware',  # Desktop auto-authentication (BEFORE AuthenticationMiddleware)
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'gamedata.middleware.ModuleContextMiddleware',  # Module support
]

# Desktop mode settings
DESKTOP_MODE = os.getenv('DESKTOP_MODE', 'True').lower() == 'true'  # Default to desktop mode

# Remove CSRF middleware for desktop applications (no CSRF risk in desktop context)
if DESKTOP_MODE:
    MIDDLEWARE = [mw for mw in MIDDLEWARE if mw != 'django.middleware.csrf.CsrfViewMiddleware']

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'module_first': {
            # Module/logger name first, then the message - much cleaner!
            'format': '[{name:30}] {message}',
            'style': '{',
        },
        'simple': {
            # Simpler format for production/sidecar - no level prefix since Rust adds it
            'format': '{asctime} {name} {message}',
            'style': '{',
            'datefmt': '%H:%M:%S',
        },
        'minimal': {
            # Even more minimal - just the message
            'format': '{message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'module_first'  # Use module-first format for cleaner logs
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.security': {
            'handlers': ['console'],
            'level': 'DEBUG',  # Show security-related logs
            'propagate': False,
        },
        'api': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 100,
}

# Disable DRF's CSRF checking in desktop mode
if DESKTOP_MODE:
    REST_FRAMEWORK['DEFAULT_AUTHENTICATION_CLASSES'] = []
    REST_FRAMEWORK['DEFAULT_PERMISSION_CLASSES'] = ['rest_framework.permissions.AllowAny']

# CORS settings - Only for Next.js development server
CORS_ALLOWED_ORIGINS = os.getenv('CORS_ALLOWED_ORIGINS', 'http://localhost:3000,http://127.0.0.1:3000,http://localhost:3001,http://127.0.0.1:3001').split(',')

# Cache configuration
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
        'OPTIONS': {
            'MAX_ENTRIES': 1000,
            'CULL_FREQUENCY': 3,  # When MAX_ENTRIES is reached, 1/3 of entries are removed
        }
    },
    'character_manager': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'character-manager-cache',
        'OPTIONS': {
            'MAX_ENTRIES': 500,  # Store up to 500 character managers
            'CULL_FREQUENCY': 4,  # When full, remove 1/4 of entries
        },
        'TIMEOUT': 3600,  # 1 hour timeout by default
    }
}
# Note: Desktop app uses middleware auto-authentication, no cross-origin requests needed

# For development, you can also use this to allow all origins (be careful in production!)
# CORS_ALLOW_ALL_ORIGINS = True

# CSRF Trusted Origins for Tauri
CSRF_TRUSTED_ORIGINS = ['http://localhost:3000', 'http://127.0.0.1:3000', 'http://localhost:3001', 'http://127.0.0.1:3001']

# NWN2 paths - import from nwn2_settings
from .nwn2_settings import nwn2_paths

NWN2_INSTALL_PATH = os.getenv('NWN2_INSTALL_PATH', str(nwn2_paths.game_folder))
NWN2_DATA_PATH = os.getenv('NWN2_DATA_PATH', str(nwn2_paths.data))
NWN2_OVERRIDE_PATH = os.getenv('NWN2_OVERRIDE_PATH', str(nwn2_paths.user_override))

# In-Memory 2DA Cache Settings
NWN2_MEMORY_CACHE = os.getenv('NWN2_MEMORY_CACHE', 'true').lower() == 'true'  # Enable in-memory caching
NWN2_PRELOAD_2DA = os.getenv('NWN2_PRELOAD_2DA', 'true').lower() == 'true'   # Preload on startup
NWN2_CACHE_MAX_MB = int(os.getenv('NWN2_CACHE_MAX_MB', '50'))                # Maximum cache size in MB
NWN2_COMPRESS_CACHE = os.getenv('NWN2_COMPRESS_CACHE', 'true').lower() == 'true'  # Enable compression
NWN2_COMPRESS_THRESHOLD_KB = int(os.getenv('NWN2_COMPRESS_THRESHOLD_KB', '100'))  # Compress if > 100KB
NWN2_SMART_PRELOAD = os.getenv('NWN2_SMART_PRELOAD', 'true').lower() == 'true'    # Use smart preloading

# Pre-compiled Cache Settings (60-70% startup speedup)
ENABLE_PRECOMPILED_CACHE = os.getenv('ENABLE_PRECOMPILED_CACHE', 'true').lower() == 'true'
